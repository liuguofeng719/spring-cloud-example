server.port=8002
spring.application.name=spring-cloud-eureka-provider-8002
#注册到eureka服务端的地址，不带密码登录的
#eureka.client.service-url.defaultZone=http://www.eureka9000.com:9000/eureka/
#点击具体的微服务，右下角是否显示ip
eureka.instance.prefer-ip-address=true
#显示微服务的名称
eureka.instance.instance-id=spring-cloud-eureka-provider-8002
# 单机配置
#注册的时候需要带入 用户名 密码   基本格式为  http:用户名:密码@ip:端口/eureka/
#eureka.client.service-url.defaultZone: http://${spring.security.user.name}:${spring.security.user.password}@www.eureka9000.com:9000/eureka/
# 集群配置,注册2个服务的地址，通过逗号分隔
eureka.client.service-url.defaultZone:http://${spring.security.user.name}:${spring.security.user.password}@www.eureka9000.com:9000/eureka/,http://${spring.security.user.name}:${spring.security.user.password}@www.eureka9001.com:9001/eureka/
# 每30s秒向eureka发送心跳请求 (默认)30
eureka.instance.lease-renewal-interval-in-seconds=30
# (默认) 该配置说明,你的最后一次续约时间（心跳时间）开始，往后推90s 还没接受到你的心跳,那么我就需要把你剔除.
eureka.instance.lease-expiration-duration-in-seconds=90
# 表示客户端多久去服务器拉去配置信息，(默认) 30
eureka.client.registry-fetch-interval-seconds=30
# 开启spring security 让eureka支持登录界面
spring.security.basic.enable=true
spring.security.user.name=root
spring.security.user.password=123456
spring.datasource.druid.asset.url=jdbc:mysql://127.0.0.1:3306/xy_standard_asset?useUnicode=true&serverTimezone=Asia/Shanghai&characterEncoding=utf-8&useSSL=false
spring.datasource.druid.asset.username=root
spring.datasource.druid.asset.password=123456
spring.datasource.druid.asset.driverClassName=com.mysql.jdbc.Driver
#druid pool
spring.datasource.druid.asset.initial-size=5
spring.datasource.druid.asset.max-active=50
spring.datasource.druid.asset.min-idle=5
spring.datasource.druid.asset.max-wait=60000
spring.datasource.druid.asset.pool-prepared-statements=false
spring.datasource.druid.asset.max-pool-prepared-statement-per-connection-size=20
spring.datasource.druid.asset.max-open-prepared-statements=20
spring.datasource.druid.asset.validation-query=SELECT 1
spring.datasource.druid.asset.validation-query-timeout=30000
spring.datasource.druid.asset.test-on-borrow=true
spring.datasource.druid.asset.test-on-return=false
spring.datasource.druid.asset.test-while-idle=false